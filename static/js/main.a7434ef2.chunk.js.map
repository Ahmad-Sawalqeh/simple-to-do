{"version":3,"sources":["reducer/reducer.js","actions/actionTypes.js","store/store.js","actions/actionCreater.js","components/taskForm/index.js","components/list/index.js","components/control/index.js","components/tasksList/index.js","app.js","index.js"],"names":["initialState","userInput","list","isEditing","editingItemId","wantedListToShow","toggleItems","reducer","state","action","type","payload","myStore","createStore","setUserInput","input","setList","setIsEditing","setEditingItemId","id","setWantedListToShow","TaskForm","props","changeUserInput","addToList","className","onChange","value","placeholder","onClick","List","completed","itemToEdit","deleteItem","map","val","idx","key","complete","Control","hideShowAllItems","itemsToShow","deleteCompletedItem","clearList","allCompletedItem","some","oneItem","TasksList","filter","item","length","App","useSelector","dispatch","useDispatch","e","target","newList","newItem","randomId","push","updateList","editingItem","find","itemvalue","itemId","choise","Root","store","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7434ef2.chunk.js","sourcesContent":["import {\n    SET_USER_INPUT,\n    SET_LIST,\n    SET_IS_EDITING,\n    SET_EDITING_ITEM_ID,\n    SET_WANTED_LIST_TO_SHOW,\n    SET_TOGGLE_ITEMS\n  } from \"../actions/actionTypes.js\";\n\nconst initialState = {\n    userInput: '',\n    list: [],\n    isEditing: false,\n    editingItemId: 0,\n    wantedListToShow: [],\n    toggleItems: false\n}\n\nconst reducer = (state = initialState, action) => {\n    const { type, payload } = action;\n    switch (type){\n        case SET_USER_INPUT:\n            return { ...state, userInput: payload };\n        case SET_LIST:\n            return { ...state, list: payload };\n        case SET_IS_EDITING:\n            return { ...state, isEditing: payload };\n        case SET_EDITING_ITEM_ID:\n            return { ...state, editingItemId: payload };\n        case SET_WANTED_LIST_TO_SHOW:\n            return { ...state, wantedListToShow: payload };\n        case SET_TOGGLE_ITEMS:\n            return { ...state, toggleItems: payload };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","export const SET_USER_INPUT = `setUserInput`;\n\nexport const SET_LIST = `setList`;\n\nexport const SET_IS_EDITING = `setIsEditing`;\n\nexport const SET_EDITING_ITEM_ID = `setEditingItemId`;\n\nexport const SET_WANTED_LIST_TO_SHOW = `setWantedListToShow`;\n\nexport const SET_TOGGLE_ITEMS = `setToggleItems`;\n","import { createStore } from \"redux\";\nimport reducer from \"../reducer/reducer.js\";\n\nconst myStore = createStore(reducer);\n\nexport default myStore;\n","import {\n    SET_USER_INPUT,\n    SET_LIST,\n    SET_IS_EDITING,\n    SET_EDITING_ITEM_ID,\n    SET_WANTED_LIST_TO_SHOW,\n    SET_TOGGLE_ITEMS\n  } from \"./actionTypes.js\";\n\nexport const setUserInput = input => {\n  return {\n    type: SET_USER_INPUT,\n    payload: input\n  };\n};\n\nexport const setList = list => {\n  return {\n    type: SET_LIST,\n    payload: list\n  };\n};\n\nexport const setIsEditing = isEditing => {\n  return {\n    type: SET_IS_EDITING,\n    payload: isEditing\n  };\n};\n\nexport const setEditingItemId = id => {\n  return {\n    type: SET_EDITING_ITEM_ID,\n    payload: id\n  };\n};\n\nexport const setWantedListToShow = list => {\n  return {\n    type: SET_WANTED_LIST_TO_SHOW,\n    payload: list\n  };\n};\n\nexport const setToggleItems = toggle => {\n  return {\n    type: SET_TOGGLE_ITEMS,\n    payload: toggle\n  };\n};\n","import React from 'react';\n\nfunction TaskForm(props){\n    const {changeUserInput, addToList, userInput, isEditing } = props;\n    return (\n        <>\n          <div className='card-body'>\n            <h3>Add an Item ...</h3>\n            <div className='input-group'>\n              <div className='input-group-prepend'>\n                <div className='input-group-text bg-primary text-white'>\n                  <i className=\"fas fa-book\"></i>\n                </div>\n              </div>\n              <input className='form-control text-capitalize' onChange={changeUserInput} value={userInput} type='text' placeholder='type item here ...' />\n            </div>\n            <button className={`btn btn-block mt-2 font-weight-bold ${isEditing ? 'btn-secondary' : 'btn-primary'}`} onClick={addToList} >\n              {isEditing ? `Edit Item` : `Add Item`}\n            </button>\n          </div>\n        </>\n    );\n}\n\nexport default TaskForm;\n","import React from 'react';\n\nconst List = props => {\n    const { wantedListToShow, completed, itemToEdit, deleteItem } = props;\n    return (\n        <ul className='list-group'>\n            {\n                wantedListToShow.map((val, idx) =>{\n                    return(\n                        <>\n                            <div key={val.id} className='item d-flex justify-content-between'>\n                                <li key={val.id} \n                                    className={`m-3 list-group-item ${val.complete ? 'completed' : ''}`} \n                                    onClick={() => completed(val.id)} >\n                                    {idx + 1}- {val.value}\n                                </li>\n                                {\n                                    val.complete ? \n                                        <span className='lead text-danger font-weight-bolder mt-4'>completed</span>\n                                    :\n                                        <button className='btn btn-success mr-3 commonStyleButton' onClick={()=>itemToEdit(val.id)} >\n                                            Edit <i className=\"far fa-edit\"></i>\n                                        </button>\n                                }\n                                <button className='btn btn-warning commonStyleButton' onClick={()=>deleteItem(val.id)} >\n                                    Delete <i className=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        </>\n                    );\n                })\n            }\n        </ul>\n    )\n}\n\nexport default List;\n","import React from 'react';\n\nconst Control = props => {\n    const {  wantedListToShow, hideShowAllItems, itemsToShow, toggleItems, deleteCompletedItem, clearList, allCompletedItem } = props;\n    return (\n        <div className='text-center'>\n            <button className='btn btn-primary mb-3 mr-3' onClick={hideShowAllItems}>\n                {toggleItems ? `Show all` : `Hide all`}\n            </button>\n            <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('active')}>Active Items</button>\n            <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('completed')}>Completed Items</button>\n            <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('all')}>All items</button>\n            <button className='btn btn-warning mb-3 mr-3' onClick={allCompletedItem}>All completed</button>\n            {\n                wantedListToShow.some(oneItem => oneItem.complete) && <button className='btn btn-danger mb-3 mr-3' onClick={deleteCompletedItem}>Delete completed items</button>\n            }\n            <button className='btn btn-danger btn-block p-2' onClick={clearList} >Clear List <i className=\"fas fa-trash\"></i></button>\n        </div>\n    )\n}\n\nexport default Control;\n","import React from 'react';\nimport List from './../list';\nimport Control from './../control';\n\nfunction TasksList(props){\n\n    const { list, completed, deleteItem, itemToEdit, itemsToShow, wantedListToShow, deleteCompletedItem, hideShowAllItems, toggleItems, allCompletedItem, clearList } = props;\n\n    function itemsLeft (){\n        return list.filter(item => !item.complete).length;\n        // return wantedListToShow.filter(item => !item.complete).length;\n    }\n\n    return (\n        <>\n            <div>\n                <h2 className='m-3 font-weight-bold text-center'>Tasks board</h2>\n                <p className='lead text-center font-weight-bold'>\n                    There is only <span className='text-primary'> {itemsLeft()} </span> items NOT completed yet\n                </p>\n                <List wantedListToShow={wantedListToShow} completed={completed} itemToEdit={itemToEdit} deleteItem={deleteItem} />\n                <Control wantedListToShow={wantedListToShow} hideShowAllItems={hideShowAllItems} itemsToShow={itemsToShow} toggleItems={toggleItems} deleteCompletedItem={deleteCompletedItem} clearList={clearList} allCompletedItem={allCompletedItem} />\n            </div>\n        </>\n    );\n}\n\nexport default TasksList;\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as randomId } from 'uuid';\n\nimport { setUserInput, setIsEditing, setEditingItemId, setList, setWantedListToShow, setToggleItems,  } from \"./actions/actionCreater.js\";\n\nimport TaskForm from './components/taskForm';\nimport TasksList from './components/tasksList';\nimport './app.css';\n\n/*\n** Task Manager MVC\n  1. add item\n  2. delete item\n  3. edit item\n  4. clear tasks list\n  5. complete one item\n  6. display tasks list\n  7. delete all completed items\n  8. make all items complete, all at once\n  9. show only completed/active/all items\n*/\n\nfunction App(){\n\n  const { userInput, list, isEditing, editingItemId, wantedListToShow, toggleItems } = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  function changeUserInput(e){\n    let input = e.target.value;\n    dispatch(setUserInput(input));\n  }\n\n  function addToList(){\n    if(userInput === '') return;\n    let newList;\n    if(isEditing && editingItemId !== 0){\n      let listCopy = [...list];\n      newList = listCopy.map(val => {\n        if(val.id === editingItemId) val.value = userInput;\n        return val;\n      });\n      dispatch(setIsEditing(!isEditing));\n      dispatch(setEditingItemId(0));\n    }else{\n      const newItem = {\n        id: randomId(),\n        complete : false,\n        value: userInput\n      }\n      newList = [...list];\n      newList.push(newItem);\n    }\n    dispatch(setList(newList));\n    dispatch(setWantedListToShow(newList));\n    dispatch(setUserInput(''));\n  }\n\n  function deleteItem(id){\n    const newlist = [...list];\n    const updateList = newlist.filter(val => val.id !== id);\n    dispatch(setList(updateList));\n    dispatch(setWantedListToShow(updateList));\n  }\n\n  function itemToEdit(id){\n    const listCopy = [...list];\n    const editingItem = listCopy.find(val => val.id === id);\n    let itemvalue = editingItem.value;\n    let itemId = editingItem.id;\n    dispatch(setUserInput(itemvalue));\n    dispatch(setIsEditing(!isEditing));\n    dispatch(setEditingItemId(itemId));\n  }\n\n  function completed(id){\n    const listCopy = [...list];\n    let newList = listCopy.map(val => {\n      if(val.id === id) val.complete = !val.complete;\n      return val;\n    });\n    dispatch(setList(newList));\n    dispatch(setWantedListToShow(newList));\n  }\n\n  function itemsToShow(choise){\n    if(choise === 'active') {\n      dispatch(setWantedListToShow(list.filter(item => !item.complete)));\n    }else if(choise === 'completed'){\n      dispatch(setWantedListToShow(list.filter(item => item.complete)));\n    }else if(choise === 'all'){\n      dispatch(setWantedListToShow(list));\n    }\n  }\n\n  function deleteCompletedItem(){\n    let newList = list.filter(item => !item.complete);\n    dispatch(setList(newList));\n    dispatch(setWantedListToShow(newList));\n  }\n\n  function clearList(){\n    dispatch(setList([]));\n    dispatch(setWantedListToShow([]));\n  }\n\n  function hideShowAllItems(){\n    toggleItems ? dispatch(setWantedListToShow(list)) : dispatch(setWantedListToShow([]));\n    dispatch(setToggleItems(!toggleItems));\n  }\n\n  function allCompletedItem(){\n    const listCopy = [...list];\n    let newList = listCopy.map(val => {\n      val.complete = true;\n      return val;\n    });\n    dispatch(setList(newList));\n    dispatch(setWantedListToShow(newList));\n  }\n\n  return (\n    <>\n      <div className='container mt-5'>\n        <div className='card'>\n          <h1 className='m-3 font-weight-bold'>My List</h1>\n          <TaskForm \n            changeUserInput={changeUserInput} \n            addToList={addToList} \n            userInput={userInput} \n            isEditing={isEditing}\n          />\n          {\n            !isEditing && list[0] &&\n              <TasksList list={list} \n                completed={completed} \n                deleteItem={deleteItem} \n                itemToEdit={itemToEdit} \n                itemsToShow={itemsToShow} \n                wantedListToShow={wantedListToShow} \n                deleteCompletedItem={deleteCompletedItem}\n                hideShowAllItems={hideShowAllItems}\n                toggleItems={toggleItems}\n                allCompletedItem={allCompletedItem}\n                clearList={clearList}\n              />\n          }\n        </div>\n      </div>\n    </>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './index.css';\n\nimport myStore from \"./store/store.js\";\nimport App from './app.js';\n\nfunction Root(){\n  return (\n    <Provider store={myStore}>\n      <App />\n    </Provider>\n  );\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}