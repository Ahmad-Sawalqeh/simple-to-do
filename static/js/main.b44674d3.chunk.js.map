{"version":3,"sources":["reducer/reducer.js","actions/actionTypes.js","store/store.js","actions/actionCreater.js","components/taskForm/index.js","components/list/index.js","components/control/index.js","components/tasksBoard/index.js","app.js","index.js"],"names":["initialState","userInput","list","isEditing","editingItemId","wantedListToShow","toggleItems","reducer","state","action","type","payload","myStore","createStore","setUserInput","input","setList","setIsEditing","setEditingItemId","id","setWantedListToShow","TaskForm","useSelector","dispatch","useDispatch","className","onSubmit","e","preventDefault","newList","map","val","value","newItem","randomId","complete","push","onChange","target","placeholder","List","idx","key","onClick","completed","editingItem","find","itemvalue","itemId","itemToEdit","updateList","filter","deleteItem","Control","itemsToShow","choise","item","some","oneItem","TasksBoard","length","App","Root","store","render","document","getElementById"],"mappings":"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","file":"static/js/main.b44674d3.chunk.js","sourcesContent":["import {\n    SET_USER_INPUT,\n    SET_LIST,\n    SET_IS_EDITING,\n    SET_EDITING_ITEM_ID,\n    SET_WANTED_LIST_TO_SHOW,\n    SET_TOGGLE_ITEMS\n  } from \"../actions/actionTypes.js\";\n\nconst initialState = {\n    userInput: '',\n    list: [],\n    isEditing: false,\n    editingItemId: 0,\n    wantedListToShow: [],\n    toggleItems: false\n}\n\nconst reducer = (state = initialState, action) => {\n    const { type, payload } = action;\n    switch (type){\n        case SET_USER_INPUT:\n            return { ...state, userInput: payload };\n        case SET_LIST:\n            return { ...state, list: payload };\n        case SET_IS_EDITING:\n            return { ...state, isEditing: payload };\n        case SET_EDITING_ITEM_ID:\n            return { ...state, editingItemId: payload };\n        case SET_WANTED_LIST_TO_SHOW:\n            return { ...state, wantedListToShow: payload };\n        case SET_TOGGLE_ITEMS:\n            return { ...state, toggleItems: payload };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;\n","export const SET_USER_INPUT = `setUserInput`;\n\nexport const SET_LIST = `setList`;\n\nexport const SET_IS_EDITING = `setIsEditing`;\n\nexport const SET_EDITING_ITEM_ID = `setEditingItemId`;\n\nexport const SET_WANTED_LIST_TO_SHOW = `setWantedListToShow`;\n\nexport const SET_TOGGLE_ITEMS = `setToggleItems`;\n","import { createStore } from \"redux\";\nimport reducer from \"../reducer/reducer.js\";\n\nconst myStore = createStore(reducer);\n\nexport default myStore;\n","import {\n    SET_USER_INPUT,\n    SET_LIST,\n    SET_IS_EDITING,\n    SET_EDITING_ITEM_ID,\n    SET_WANTED_LIST_TO_SHOW,\n    SET_TOGGLE_ITEMS\n  } from \"./actionTypes.js\";\n\nexport const setUserInput = input => {\n  return {\n    type: SET_USER_INPUT,\n    payload: input\n  };\n};\n\nexport const setList = list => {\n  return {\n    type: SET_LIST,\n    payload: list\n  };\n};\n\nexport const setIsEditing = isEditing => {\n  return {\n    type: SET_IS_EDITING,\n    payload: isEditing\n  };\n};\n\nexport const setEditingItemId = id => {\n  return {\n    type: SET_EDITING_ITEM_ID,\n    payload: id\n  };\n};\n\nexport const setWantedListToShow = list => {\n  return {\n    type: SET_WANTED_LIST_TO_SHOW,\n    payload: list\n  };\n};\n\nexport const setToggleItems = toggle => {\n  return {\n    type: SET_TOGGLE_ITEMS,\n    payload: toggle\n  };\n};\n","import React from 'react';\nimport { v4 as randomId } from 'uuid';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { \n  setUserInput, \n  setIsEditing, \n  setEditingItemId, \n  setList, \n  setWantedListToShow, \n} from \"./../../actions/actionCreater.js\";\n\nconst TaskForm = () => {\n\n    const { userInput, list, isEditing, editingItemId, } = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    function changeUserInput(e){\n      let input = e.target.value;\n      dispatch(setUserInput(input));\n    }\n\n    function addItem(e){\n      e.preventDefault();\n      if(userInput === '') return;\n      let newList;\n      if(isEditing && editingItemId !== 0){\n        let listCopy = [...list];\n        newList = listCopy.map(val => {\n          if(val.id === editingItemId) val.value = userInput;\n          return val;\n        });\n        dispatch(setIsEditing(!isEditing));\n        dispatch(setEditingItemId(0));\n      }else{\n        const newItem = {\n          id: randomId(),\n          complete : false,\n          value: userInput\n        }\n        newList = [...list];\n        newList.push(newItem);\n      }\n      dispatch(setList(newList));\n      dispatch(setWantedListToShow(newList));\n      dispatch(setUserInput(''));\n    }\n\n    return (\n        <>\n          <div className='card-body'>\n            <h3>Add an Item ...</h3>\n            <form onSubmit={addItem}>\n              <div className='input-group'>\n                <div className='input-group-prepend'>\n                  <div className='input-group-text bg-primary text-white'>\n                    <i className=\"fas fa-book\"></i>\n                  </div>\n                </div>\n                <input className='form-control text-capitalize' onChange={changeUserInput} value={userInput} type='text' placeholder='type item here ...' />\n              </div>\n              <button className={`btn btn-block mt-2 font-weight-bold ${isEditing ? 'btn-secondary' : 'btn-primary'}`} >\n                {isEditing ? `Edit Item` : `Add Item`}\n              </button>\n            </form>\n          </div>\n        </>\n    );\n}\n\nexport default TaskForm;\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { \n  setUserInput, \n  setIsEditing, \n  setEditingItemId, \n  setList, \n  setWantedListToShow, \n} from \"./../../actions/actionCreater.js\";\n\nconst List = () => {\n\n    const { list, wantedListToShow, isEditing } = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    function deleteItem(id){\n        const newlist = [...list];\n        const updateList = newlist.filter(val => val.id !== id);\n        dispatch(setList(updateList));\n        dispatch(setWantedListToShow(updateList));\n    }\n    \n    function itemToEdit(id){\n        const listCopy = [...list];\n        const editingItem = listCopy.find(val => val.id === id);\n        let itemvalue = editingItem.value;\n        let itemId = editingItem.id;\n        dispatch(setUserInput(itemvalue));\n        dispatch(setIsEditing(!isEditing));\n        dispatch(setEditingItemId(itemId));\n    }\n    \n    function completed(id){\n        const listCopy = [...list];\n        let newList = listCopy.map(val => {\n          if(val.id === id) val.complete = !val.complete;\n          return val;\n        });\n        dispatch(setList(newList));\n        dispatch(setWantedListToShow(newList));\n    }\n\n    return (\n        <ul className='list-group'>\n            {\n                wantedListToShow.map((val, idx) =>{\n                    return(\n                        <>\n                            <div key={val.id} className='item d-flex justify-content-between'>\n                                <li key={val.id} \n                                    className={`m-3 list-group-item ${val.complete ? 'completed' : ''}`} \n                                    onClick={() => completed(val.id)} >\n                                    {idx + 1}- {val.value}\n                                </li>\n                                {\n                                    val.complete ? \n                                        <span className='lead text-danger font-weight-bolder mt-4'>completed</span>\n                                    :\n                                        <button className='btn btn-success mr-3 commonStyleButton' onClick={()=>itemToEdit(val.id)} >\n                                            Edit <i className=\"far fa-edit\"></i>\n                                        </button>\n                                }\n                                <button className='btn btn-warning commonStyleButton' onClick={()=>deleteItem(val.id)} >\n                                    Delete <i className=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        </>\n                    );\n                })\n            }\n        </ul>\n    )\n}\n\nexport default List;\n","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { \n  setList, \n  setWantedListToShow, \n  setToggleItems, \n} from \"./../../actions/actionCreater.js\";\n\nconst Control = () => {\n\n    const { list, wantedListToShow, toggleItems } = useSelector(state => state);\n    const dispatch = useDispatch();\n\n    function itemsToShow(choise){\n        if(choise === 'active') {\n          dispatch(setWantedListToShow(list.filter(item => !item.complete)));\n        }else if(choise === 'completed'){\n          dispatch(setWantedListToShow(list.filter(item => item.complete)));\n        }else if(choise === 'all'){\n          dispatch(setWantedListToShow(list));\n        }\n     }\n    \n    function deleteCompletedItem(){\n        let newList = list.filter(item => !item.complete);\n        dispatch(setList(newList));\n        dispatch(setWantedListToShow(newList));\n    }\n\n    function clearList(){\n        dispatch(setList([]));\n        dispatch(setWantedListToShow([]));\n    }\n\n    function hideShowAllItems(){\n        toggleItems ? dispatch(setWantedListToShow(list)) : dispatch(setWantedListToShow([]));\n        dispatch(setToggleItems(!toggleItems));\n    }\n\n    function allCompletedItem(){\n        const listCopy = [...list];\n        let newList = listCopy.map(val => {\n            val.complete = true;\n            return val;\n        });\n        dispatch(setList(newList));\n        dispatch(setWantedListToShow(newList));\n    }\n\n    return (\n        <div className='text-center'>\n            <button className='btn btn-primary mb-3 mr-3' onClick={hideShowAllItems}>\n                {toggleItems ? `Show all` : `Hide all`}\n            </button>\n            <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('active')}>Active Items</button>\n            <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('completed')}>Completed Items</button>\n            <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('all')}>All items</button>\n            <button className='btn btn-warning mb-3 mr-3' onClick={allCompletedItem}>All completed</button>\n            {\n                wantedListToShow.some(oneItem => oneItem.complete) && <button className='btn btn-danger mb-3 mr-3' onClick={deleteCompletedItem}>Delete completed items</button>\n            }\n            <button className='btn btn-danger btn-block p-2' onClick={clearList} >Clear List <i className=\"fas fa-trash\"></i></button>\n        </div>\n    )\n}\n\nexport default Control;\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\n\nimport List from '../list';\nimport Control from '../control';\n\nconst TasksBoard = () => {\n\n    const { list } = useSelector(state => state);\n\n    function itemsLeft (){\n        return list.filter(item => !item.complete).length;\n        // return wantedListToShow.filter(item => !item.complete).length;\n    }\n\n    return (\n        <>\n            <div>\n                <h2 className='m-3 font-weight-bold text-center'>Tasks board</h2>\n                <p className='lead text-center font-weight-bold'>\n                    There is only <span className='text-primary'> {itemsLeft()} </span> items NOT completed yet\n                </p>\n                <List />\n                <Control />\n            </div>\n        </>\n    );\n}\n\nexport default TasksBoard;\n","import React from 'react';\nimport { useSelector } from \"react-redux\";\n\nimport TaskForm from './components/taskForm';\nimport TasksBoard from './components/tasksBoard';\nimport './app.css';\n\n/*\n** Task Manager MVC\n  1. add item\n  2. delete item\n  3. edit item\n  4. clear tasks list\n  5. complete one item\n  6. display tasks list\n  7. delete all completed items\n  8. make all items complete, all at once\n  9. show only completed/active/all items\n*/\n\nfunction App(){\n\n  const { list, isEditing } = useSelector(state => state);\n\n  return (\n    <>\n      <div className='container mt-5'>\n        <div className='card'>\n          <h1 className='m-3 font-weight-bold'>My List</h1>\n          <TaskForm />\n          {\n            !isEditing && list[0] && <TasksBoard />\n          }\n        </div>\n      </div>\n    </>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport './index.css';\n\nimport myStore from \"./store/store.js\";\nimport App from './app.js';\n\nfunction Root(){\n  return (\n    <Provider store={myStore}>\n      <App />\n    </Provider>\n  );\n}\n\nrender(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}