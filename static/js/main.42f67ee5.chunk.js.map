{"version":3,"sources":["components/todoform/todoform.js","components/todolist/todolist.js","reducer/reducer.js","app.js","index.js"],"names":["ToDoForm","props","changeUserInput","addToList","userInput","isEditing","className","onChange","value","type","placeholder","onClick","List","wantedListToShow","completed","itemToEdit","deleteItem","map","val","idx","key","id","complete","ToDoList","list","itemsToShow","deleteCompletedItem","hideShowAllItems","toggleItems","allCompletedItem","clearList","filter","item","length","some","oneItem","reducer","state","action","payload","editingItemId","App","useReducer","dispatch","e","input","target","newList","newItem","randomId","push","updateList","editingItem","find","itemvalue","itemId","choise","Root","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42f67ee5.chunk.js","sourcesContent":["\nimport React from 'react';\n\nfunction ToDoForm(props){\n    const {changeUserInput, addToList, userInput, isEditing } = props;\n    return (\n        <>\n          <div className='card-body'>\n            <h3>Add an Item ...</h3>\n            <div className='input-group'>\n              <div className='input-group-prepend'>\n                <div className='input-group-text bg-primary text-white'>\n                  <i className=\"fas fa-book\"></i>\n                </div>\n              </div>\n              <input className='form-control text-capitalize' onChange={changeUserInput} value={userInput} type='text' placeholder='type item here ...' />\n            </div>\n            <button className={`btn btn-block mt-2 font-weight-bold ${isEditing ? 'btn-secondary' : 'btn-primary'}`} onClick={addToList} >\n              {isEditing ? `Edit Item` : `Add Item`}\n            </button>\n          </div>\n        </>\n    );\n}\n\nexport default ToDoForm;","import React from 'react';\n\nfunction ToDoList(props){\n\n    const { list, completed, deleteItem, itemToEdit, itemsToShow, wantedListToShow, deleteCompletedItem, hideShowAllItems, toggleItems, allCompletedItem, clearList } = props;\n\n    function itemsLeft (){\n        return list.filter(item => !item.complete).length;\n        // return wantedListToShow.filter(item => !item.complete).length;\n    }\n\n    return (\n        <>\n            <div>\n                <h2 className='m-3 font-weight-bold text-center'>To Do List</h2>\n                <p className='lead text-center font-weight-bold'>\n                    There is only <span className='text-primary'> {itemsLeft()} </span> items NOT completed yet\n                </p>\n                <ul className='list-group'>\n                    <List wantedListToShow={wantedListToShow} completed={completed} itemToEdit={itemToEdit} deleteItem={deleteItem} />\n                </ul>\n                <div className='text-center'>\n                    <button className='btn btn-primary mb-3 mr-3' onClick={hideShowAllItems}>\n                        {toggleItems ? `Show all` : `Hide all`}\n                    </button>\n                    <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('active')}>Active Items</button>\n                    <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('completed')}>Completed Items</button>\n                    <button className='btn btn-info mb-3 mr-3' onClick={() => itemsToShow('all')}>All items</button>\n                    <button className='btn btn-warning mb-3 mr-3' onClick={allCompletedItem}>All completed</button>\n                    {\n                        wantedListToShow.some(oneItem => oneItem.complete) && <button className='btn btn-danger mb-3 mr-3' onClick={deleteCompletedItem}>Delete completed items</button>\n                    }\n                </div>\n                <button className='btn btn-danger btn-block p-2' onClick={clearList} >Clear List <i className=\"fas fa-trash\"></i></button>\n            </div>\n        </>\n    );\n}\n\nconst List = props => {\n    const { wantedListToShow, completed, itemToEdit, deleteItem } = props;\n    return (\n        <>\n            {\n                wantedListToShow.map((val, idx) =>{\n                    return(\n                        <>\n                            <div key={val.id} className='item d-flex justify-content-between'>\n                                <li key={val.id} \n                                    className={`m-3 list-group-item ${val.complete ? 'completed' : ''}`} \n                                    onClick={() => completed(val.id)} >\n                                    {idx + 1}- {val.value}\n                                </li>\n                                {\n                                    val.complete ? \n                                        <span className='lead text-danger font-weight-bolder mt-4'>completed</span>\n                                    :\n                                        <button className='btn btn-success mr-3 commonStyleButton' onClick={()=>itemToEdit(val.id)} >\n                                            Edit <i className=\"far fa-edit\"></i>\n                                        </button>\n                                }\n                                <button className='btn btn-warning commonStyleButton' onClick={()=>deleteItem(val.id)} >\n                                    Delete <i className=\"fas fa-trash\"></i>\n                                </button>\n                            </div>\n                        </>\n                    );\n                })\n            }\n        </>\n    )\n}\n\nexport default ToDoList;","const reducer = (state, action) => {\n    const { type, payload } = action;\n    switch (type){\n        case 'setUserInput':\n            return { ...state, userInput: payload };\n        case 'setList':\n            return { ...state, list: payload };\n        case 'setIsEditing':\n            return { ...state, isEditing: payload };\n        case 'setEditingItemId':\n            return { ...state, editingItemId: payload };\n        case 'setWantedListToShow':\n            return { ...state, wantedListToShow: payload };\n        case 'setToggleItems':\n            return { ...state, toggleItems: payload };\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","\nimport React, { useReducer } from 'react';\nimport { v4 as randomId } from 'uuid';\nimport ToDoForm from './components/todoform/todoform.js'\nimport ToDoList from './components/todolist/todolist.js'\nimport reducer from './reducer/reducer.js'\n// import FlipMove from 'react-flip-move';\nimport './app.css';\n\n/*\n** To Do MVC\n  1. add item\n  2. delete item\n  3. edit item\n  4. clear to do list\n  5. complete one item\n  6. display to do list\n  7. delete all completed items\n  8. make all items complete, all at once\n  9. show only completed/active/all items\n*/\n\nfunction App(){\n\n  const initialState = {\n    userInput: '',\n    list: [],\n    isEditing: false,\n    editingItemId: 0,\n    wantedListToShow: [],\n    toggleItems: false\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  function changeUserInput(e){\n    let input = e.target.value;\n    dispatch({ type: 'setUserInput', payload: input });\n  }\n\n  function addToList(){\n    const { userInput, list, isEditing, editingItemId } = state;\n    if(userInput === '') return;\n    let newList;\n    if(isEditing && editingItemId !== 0){\n      let listCopy = [...list];\n      newList = listCopy.map(val => {\n        if(val.id === editingItemId) val.value = userInput;\n        return val;\n      });\n      dispatch({ type: 'setIsEditing', payload: !isEditing });\n      dispatch({ type: 'setEditingItemId', payload: 0 });\n    }else{\n      const newItem = {\n        id: randomId(),\n        complete : false,\n        value: userInput\n      }\n      newList = [...list];\n      newList.push(newItem);\n    }\n    dispatch({ type: 'setList', payload: newList });\n    dispatch({ type: 'setWantedListToShow', payload: newList });\n    dispatch({ type: 'setUserInput', payload: '' });\n  }\n\n  function deleteItem(id){\n    const { list } = state;\n    const newlist = [...list];\n    const updateList = newlist.filter(val => val.id !== id);\n    dispatch({ type: 'setList', payload: updateList });\n    dispatch({ type: 'setWantedListToShow', payload: updateList });\n  }\n\n  function itemToEdit(id){\n    const { list, isEditing } = state;\n    const listCopy = [...list];\n    // const listWithoutSelectedItem = listCopy.filter(val => val.id !== id);\n    const editingItem = listCopy.find(val => val.id === id);\n    let itemvalue = editingItem.value;\n    let itemId = editingItem.id;\n    // setList(listWithoutSelectedItem);\n    dispatch({ type: 'setUserInput', payload: itemvalue });\n    dispatch({ type: 'setIsEditing', payload: !isEditing });\n    dispatch({ type: 'setEditingItemId', payload: itemId });\n  }\n\n  function completed(id){\n    const { list } = state;\n    const listCopy = [...list];\n    let newList = listCopy.map(val => {\n      if(val.id === id) val.complete = !val.complete;\n      return val;\n    });\n    dispatch({ type: 'setList', payload: newList });\n    dispatch({ type: 'setWantedListToShow', payload: newList });\n  }\n\n  function itemsToShow(choise){\n    const { list } = state;\n    if(choise === 'active') {\n      dispatch({ type: 'setWantedListToShow', payload: list.filter(item => !item.complete) });\n    }else if(choise === 'completed'){\n      dispatch({ type: 'setWantedListToShow', payload: list.filter(item => item.complete) });\n    }else if(choise === 'all'){\n      dispatch({ type: 'setWantedListToShow', payload: list });\n    }\n  }\n\n  function deleteCompletedItem(){\n    const { list } = state;\n    let newList = list.filter(item => !item.complete);\n    dispatch({ type: 'setList', payload: newList });\n    dispatch({ type: 'setWantedListToShow', payload: newList });\n  }\n\n  function clearList(){\n    dispatch({ type: 'setList', payload: [] });\n    dispatch({ type: 'setWantedListToShow', payload: [] });\n  }\n\n  function hideShowAllItems(){\n    const { list, toggleItems } = state;\n    toggleItems ? dispatch({ type: 'setWantedListToShow', payload: list }) : dispatch({ type: 'setWantedListToShow', payload: [] });\n    dispatch({ type: 'setToggleItems', payload: !toggleItems });\n  }\n\n  function allCompletedItem(){\n    const { list } = state;\n    const listCopy = [...list];\n    let newList = listCopy.map(val => {\n      val.complete = true;\n      return val;\n    });\n    dispatch({ type: 'setList', payload: newList });\n    dispatch({ type: 'setWantedListToShow', payload: newList });\n  }\n\n  return (\n    <>\n      <div className='container mt-5'>\n        <div className='card'>\n          <h1 className='m-3 font-weight-bold'>My List</h1>\n          <ToDoForm \n            changeUserInput={changeUserInput} \n            addToList={addToList} \n            userInput={state.userInput} \n            isEditing={state.isEditing}\n          />\n          {\n            !state.isEditing && state.list[0] &&\n              <ToDoList list={state.list} \n                completed={completed} \n                deleteItem={deleteItem} \n                itemToEdit={itemToEdit} \n                itemsToShow={itemsToShow} \n                wantedListToShow={state.wantedListToShow} \n                deleteCompletedItem={deleteCompletedItem}\n                hideShowAllItems={hideShowAllItems}\n                toggleItems={state.toggleItems}\n                allCompletedItem={allCompletedItem}\n                clearList={clearList}\n              />\n          }\n        </div>\n      </div>\n    </>\n  );\n\n}\n\nexport default App;\n\n\n/**********************************************************************************/\n\n\n// import React, { useState, useReducer } from 'react';\n// import { v4 as randomId } from 'uuid';\n// import ToDoForm from './components/todoform/todoform.js'\n// import ToDoList from './components/todolist/todolist.js'\n// // import FlipMove from 'react-flip-move';\n// import './app.css';\n\n// /*\n// ** To Do MVC\n//   1. add item\n//   2. delete item\n//   3. edit item\n//   4. clear to do list\n//   5. complete one item\n//   6. display to do list\n//   7. delete all completed items\n//   8. make all items complete, all at once\n//   9. show only completed/active/all items\n// */\n\n// function App(){\n\n//   const [userInput, setUserInput] = useState('');\n//   const [list, setList] = useState([]);\n//   const [isEditing, setIsEditing] = useState(false);\n//   const [editingItemId, setEditingItemId] = useState(0);\n//   const [wantedListToShow, setWantedListToShow] = useState([]);\n//   const [toggleItems, setToggleItems] = useState(false);\n  \n//   function changeUserInput(e){\n//     let input = e.target.value\n//     setUserInput(input);\n//     dispatch({ type: 'setUserInput', payload: input });\n//   }\n\n//   function addToList(){\n//     if(userInput === '') return;\n//     let newList;\n//     if(isEditing && editingItemId !== 0){\n//       let listCopy = [...list];\n//       newList = listCopy.map(val => {\n//         if(val.id === editingItemId) val.value = userInput;\n//         return val;\n//       });\n//       setIsEditing(!isEditing);\n//       setEditingItemId(0);\n//     }else{\n//       const newItem = {\n//         id: randomId(),\n//         complete : false,\n//         value: userInput\n//       }\n//       newList = [...list];\n//       newList.push(newItem);\n//     }\n//     setList(newList);\n//     setWantedListToShow(newList);\n//     setUserInput('');\n//   }\n\n//   function deleteItem(id){\n//     const newlist = [...list];\n//     const updateList = newlist.filter(val => val.id !== id);\n//     setList(updateList);\n//     setWantedListToShow(updateList);\n//   }\n\n//   function itemToEdit(id){\n//     const listCopy = [...list];\n//     // const listWithoutSelectedItem = listCopy.filter(val => val.id !== id);\n//     const editingItem = listCopy.find(val => val.id === id);\n//     let itemvalue = editingItem.value;\n//     let itemId = editingItem.id;\n//     // setList(listWithoutSelectedItem);\n//     setUserInput(itemvalue);\n//     setIsEditing(!isEditing);\n//     setEditingItemId(itemId);\n//   }\n\n//   function completed(id){\n//     const listCopy = [...list];\n//     let newList = listCopy.map(val => {\n//       if(val.id === id) val.complete = !val.complete;\n//       return val;\n//     });\n//     setList(newList);\n//     setWantedListToShow(newList);\n//   }\n\n//   function itemsToShow(choise){\n//     if(choise === 'active') {\n//       setWantedListToShow(list.filter(item => !item.complete));\n//     }else if(choise === 'completed'){\n//       setWantedListToShow(list.filter(item => item.complete));\n//     }else if(choise === 'all'){\n//       setWantedListToShow(list);\n//     }\n//   }\n\n//   function deleteCompletedItem(){\n//     let newList = list.filter(item => !item.complete);\n//     setList(newList);\n//     setWantedListToShow(newList);\n//   }\n\n//   function clearList(){\n//     setList([]);\n//     setWantedListToShow([]); \n//   }\n\n//   function hideShowAllItems(){\n//     toggleItems ? setWantedListToShow(list) : setWantedListToShow([]);\n//     setToggleItems(!toggleItems);\n//   }\n\n//   function allCompletedItem(){\n//     const listCopy = [...list];\n//     let newList = listCopy.map(val => {\n//       val.complete = true;\n//       return val;\n//     });\n//     setList(newList);\n//     setWantedListToShow(newList);\n//   }\n\n//   return (\n//     <>\n//       <div className='container mt-5'>\n//         <div className='card'>\n//           <h1 className='m-3 font-weight-bold'>My List</h1>\n//           <ToDoForm \n//             changeUserInput={changeUserInput} \n//             addToList={addToList} \n//             userInput={userInput} \n//             isEditing={isEditing}\n//           />\n//           {\n//             !isEditing && list[0] &&\n//               <ToDoList list={list} \n//                 completed={completed} \n//                 deleteItem={deleteItem} \n//                 itemToEdit={itemToEdit} \n//                 itemsToShow={itemsToShow} \n//                 wantedListToShow={wantedListToShow} \n//                 deleteCompletedItem={deleteCompletedItem}\n//                 hideShowAllItems={hideShowAllItems}\n//                 toggleItems={toggleItems}\n//                 allCompletedItem={allCompletedItem}\n//                 clearList={clearList}\n//               />\n//           }\n//         </div>\n//       </div>\n//     </>\n//   );\n\n// }\n\n// export default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport '@fortawesome/fontawesome-free/js/all.min.js';\nimport App from './app.js';\n\nfunction Root(){\n  return (\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  );\n}\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}